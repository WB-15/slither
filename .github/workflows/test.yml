---
name: Pytest

defaults:
  run:
    shell: bash

on:
  push:
    branches: [master, dev]
  pull_request:
  schedule:
    # run CI every day even if no PRs/merges occur
    - cron: '0 12 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-2022"]
        type: ["unit", "integration", "tool"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
          cache: "pip"
          cache-dependency-path: setup.py

      - name: Install dependencies
        run: |
          pip install ".[dev]"
          solc-select install 0.8.0
          solc-select use 0.8.0

      - name: ${{ matrix.type }}
        env:
          TEST_TYPE: ${{ matrix.type }}
        # Only run coverage on ubuntu-latest.
        run: |
          if [ ${{ matrix.os }} = "ubuntu-latest" ]; then
            TEST_ARGS="--cov=slither --cov-append"
          elif [ ${{ matrix.os }} = "windows-2022" ]; then
            TEST_ARGS=""
          fi
          bash "./.github/scripts/${TEST_TYPE}_test_runner.sh" $TEST_ARGS


      - uses: ./.github/actions/upload-coverage
        # only aggregate test coverage over linux-based tests to avoid any OS-specific filesystem information stored in
        # coverage metadata.
        if: ${{ matrix.os == 'ubuntu-latest' }}

  coverage:
    needs:
      - tests

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - run: pip install coverage[toml]

      - name: download coverage data
        uses: actions/download-artifact@v3.0.2
        with:
          name: coverage-data

      - name: combine coverage data
        id: combinecoverage
        run: |
          set +e
          python -m coverage combine
          echo "## python coverage" >> $GITHUB_STEP_SUMMARY
          python -m coverage report -m --format=markdown >> $GITHUB_STEP_SUMMARY